{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from \"@/store/store\";\nVue.use(VueRouter);\nconst routes = [\n// 用户登陆页面\n{\n  path: '/login',\n  name: 'Login',\n  component: () => import('../views/Login.vue')\n},\n// 用户注册页面\n{\n  path: '/register',\n  name: 'Register',\n  component: () => import('../views/Register.vue')\n}, {\n  path: '/404',\n  name: '404',\n  component: () => import('../views/404.vue')\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\n//提供一个重置路由的方法\nexport const resetRouter = () => {\n  router.matcher = new VueRouter({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes\n  });\n};\n\n// 注意：刷新页面会导致页面路由重置\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    // 拼装动态路由\n    const manageRoute = {\n      path: '/',\n      name: 'Manage',\n      component: () => import('../views/Manage.vue'),\n      redirect: \"/home\",\n      children: [{\n        path: 'person',\n        name: '个人信息',\n        component: () => import('../views/Person.vue')\n      }, {\n        path: 'password',\n        name: '修改密码',\n        component: () => import('../views/Password.vue')\n      }]\n    };\n    const menus = JSON.parse(storeMenus);\n    menus.forEach(item => {\n      if (item.path) {\n        // 当且仅当path不为空的时候才去设置路由\n        let itemMenu = {\n          path: item.path.replace(\"/\", \"\"),\n          name: item.name,\n          component: () => import('../views/' + item.pagePath + '.vue')\n        };\n        manageRoute.children.push(itemMenu);\n      } else if (item.children.length) {\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = {\n              path: item.path.replace(\"/\", \"\"),\n              name: item.name,\n              component: () => import('../views/' + item.pagePath + '.vue')\n            };\n            manageRoute.children.push(itemMenu);\n          }\n        });\n      }\n    });\n    // 获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name);\n    if (!currentRouteNames.includes(\"Manage\")) {\n      // 动态添加到现在的路由对象中去\n      router.addRoute(manageRoute);\n    }\n  }\n};\n\n// 重置我就再set一次路由\nsetRoutes();\n\n// 路由守卫\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name); // 设置当前的路由名称，为了在Header组件中去使用\n  store.commit(\"setPath\"); // 触发store的数据更新\n  // 未找到路由的情况\n  if (!to.matched.length) {\n    const storeMenus = localStorage.getItem(\"menus\");\n    if (storeMenus) {\n      next(\"/404\");\n    } else {\n      // 跳回登录页面\n      next(\"/login\");\n    }\n  }\n  next(); // 放行路由\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","use","routes","path","name","component","router","mode","base","process","env","BASE_URL","resetRouter","matcher","setRoutes","storeMenus","localStorage","getItem","manageRoute","redirect","children","menus","JSON","parse","forEach","item","itemMenu","replace","pagePath","push","length","currentRouteNames","getRoutes","map","v","includes","addRoute","beforeEach","to","from","next","setItem","commit","matched"],"sources":["D:/Work/Tmall/after-vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport store from \"@/store/store\";\n\nVue.use(VueRouter)\n\nconst routes = [\n    // 用户登陆页面\n    {\n        path: '/login',\n        name: 'Login',\n        component: () => import('../views/Login.vue')\n    },\n    // 用户注册页面\n    {\n        path: '/register',\n        name: 'Register',\n        component: () => import('../views/Register.vue')\n    },\n    {\n        path: '/404',\n        name: '404',\n        component: () => import('../views/404.vue')\n    },\n]\n\nconst router = new VueRouter({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes\n})\n\n//提供一个重置路由的方法\nexport const resetRouter = () => {\n    router.matcher = new VueRouter({\n        mode: 'history',\n        base: process.env.BASE_URL,\n        routes\n    })\n}\n\n// 注意：刷新页面会导致页面路由重置\nexport const setRoutes = () => {\n    const storeMenus = localStorage.getItem(\"menus\");\n    if (storeMenus) {\n        // 拼装动态路由\n        const manageRoute = {\n            path: '/',\n            name: 'Manage',\n            component: () => import('../views/Manage.vue'),\n            redirect: \"/home\",\n            children: [\n                {path: 'person', name: '个人信息', component: () => import('../views/Person.vue')},\n                {path: 'password', name: '修改密码', component: () => import('../views/Password.vue')}\n            ]\n        }\n        const menus = JSON.parse(storeMenus)\n        menus.forEach(item => {\n            if (item.path) { // 当且仅当path不为空的时候才去设置路由\n                let itemMenu = {\n                    path: item.path.replace(\"/\", \"\"),\n                    name: item.name,\n                    component: () => import('../views/' + item.pagePath + '.vue')\n                }\n                manageRoute.children.push(itemMenu)\n            } else if (item.children.length) {\n                item.children.forEach(item => {\n                    if (item.path) {\n                        let itemMenu = {\n                            path: item.path.replace(\"/\", \"\"),\n                            name: item.name,\n                            component: () => import('../views/' + item.pagePath + '.vue')\n                        }\n                        manageRoute.children.push(itemMenu)\n                    }\n                })\n            }\n        })\n        // 获取当前的路由对象名称数组\n        const currentRouteNames = router.getRoutes().map(v => v.name)\n        if (!currentRouteNames.includes(\"Manage\")) {\n            // 动态添加到现在的路由对象中去\n            router.addRoute(manageRoute)\n        }\n    }\n}\n\n// 重置我就再set一次路由\nsetRoutes()\n\n// 路由守卫\nrouter.beforeEach((to, from, next) => {\n    localStorage.setItem(\"currentPathName\", to.name)  // 设置当前的路由名称，为了在Header组件中去使用\n    store.commit(\"setPath\")  // 触发store的数据更新\n    // 未找到路由的情况\n    if (!to.matched.length) {\n        const storeMenus = localStorage.getItem(\"menus\")\n        if (storeMenus) {\n            next(\"/404\")\n        } else {\n            // 跳回登录页面\n            next(\"/login\")\n        }\n    }\n    next()  // 放行路由\n})\n\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}